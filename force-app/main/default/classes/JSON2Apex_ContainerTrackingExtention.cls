/*
Description  : Generated by JSON2Apex http://json2apex.herokuapp.com/

* version       Date                Owner                                       Description
*******************************************************************************************************************
* V1.0          16/06/2019          sreya.v@maersk.com                   Parsing the JSON response retrieved on ContainerTracking AO service. 
*-------------------------------------------------------------------------------------------------------------------
*/


public class JSON2Apex_ContainerTrackingExtention {

    
	public class Origin {
		public String terminal {get;set;} 
		public String geo_site {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String country {get;set;} 
		public String country_code {get;set;} 
		public String geoid_city {get;set;} 
		public String site_type {get;set;} 

		public Origin(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'terminal') {
							terminal = parser.getText();
						} else if (text == 'geo_site') {
							geo_site = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'country_code') {
							country_code = parser.getText();
						} else if (text == 'geoid_city') {
							geoid_city = parser.getText();
						} else if (text == 'site_type') {
							site_type = parser.getText();
						}
                       
                        else {
							System.debug(LoggingLevel.WARN, 'Origin consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Boolean isContainerSearch {get;set;} 
    public string error{get;set;}
	public Origin origin {get;set;} 
	public Origin destination {get;set;} 
	public List<Containers> containers {get;set;} 

	public JSON2Apex_ContainerTrackingExtention(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'isContainerSearch') {
						isContainerSearch = parser.getBooleanValue();
					} else if (text == 'origin') {
						origin = new Origin(parser);
					} else if (text == 'destination') {
						destination = new Origin(parser);
					} else if (text == 'containers') {
						containers = arrayOfContainers(parser);
					} 
                    else if(text == 'error'){
                        error = parser.getText();
                    }
                    else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Events {
		public String activity {get;set;} 
		public Boolean stempty {get;set;} 
		public String actfor {get;set;} 
		public String vessel_name {get;set;} 
		public String voyage_num {get;set;} 
		public String vessel_num {get;set;} 
		public String actual_time {get;set;} 
		public String rkem_move {get;set;} 
		public Boolean is_cancelled {get;set;} 
		public Boolean is_current {get;set;} 
		public String expected_time {get;set;}
        public String eventId {get;set;}
        public String event_time {get;set;}
        public String event_time_type {get;set;}

		public Events(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'activity') {
							activity = parser.getText();
						} else if (text == 'stempty') {
							stempty = parser.getBooleanValue();
						} else if (text == 'actfor') {
							actfor = parser.getText();
						} else if (text == 'vessel_name') {
							vessel_name = parser.getText();
						} else if (text == 'voyage_num') {
							voyage_num = parser.getText();
						} else if (text == 'vessel_num') {
							vessel_num = parser.getText();
						} else if (text == 'actual_time') {
							actual_time = parser.getText();
						} else if (text == 'rkem_move') {
							rkem_move = parser.getText();
						} else if (text == 'is_cancelled') {
							is_cancelled = parser.getBooleanValue();
						} else if (text == 'is_current') {
							is_current = parser.getBooleanValue();
						} else if (text == 'expected_time') {
							expected_time = parser.getText();
                        } else if (text == 'eventId'){
                            eventId = parser.getText();
                        } else if(text == 'event_time'){
                            event_time = parser.getText();
                        } else if(text == 'event_time_type'){
                            event_time_type = parser.getText();
                        } else {
							System.debug(LoggingLevel.WARN, 'Events consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Locations {
		public String terminal {get;set;} 
		public String geo_site {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String country {get;set;} 
		public String country_code {get;set;} 
		public String geoid_city {get;set;} 
		public String site_type {get;set;} 
        public String location_code {get;set;}
		public List<Events> events {get;set;} 

		public Locations(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'terminal') {
							terminal = parser.getText();
						} else if (text == 'geo_site') {
							geo_site = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'country_code') {
							country_code = parser.getText();
						} else if (text == 'geoid_city') {
							geoid_city = parser.getText();
						} else if (text == 'site_type') {
							site_type = parser.getText();
						} else if (text == 'location_code') {
							location_code = parser.getText();
						} else if (text == 'events') {
							events = arrayOfEvents(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Locations consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Containers {
		public String container_num {get;set;} 
		public String container_size {get;set;} 
		public String container_type {get;set;} 
		public String iso_code {get;set;} 
		public String operator {get;set;} 
		public List<Locations> locations {get;set;} 
		public String eta_final_delivery {get;set;} 
		public Latest latest {get;set;} 
		public String status {get;set;} 

		public Containers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'container_num') {
							container_num = parser.getText();
						} else if (text == 'container_size') {
							container_size = parser.getText();
						} else if (text == 'container_type') {
							container_type = parser.getText();
						} else if (text == 'iso_code') {
							iso_code = parser.getText();
						} else if (text == 'operator') {
							operator = parser.getText();
						} else if (text == 'locations') {
							locations = arrayOfLocations(parser);
						} else if (text == 'eta_final_delivery') {
							eta_final_delivery = parser.getText();
						} else if (text == 'latest') {
							latest = new Latest(parser);
						} else if (text == 'status') {
							status = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Containers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public class Latest {
		public String actual_time {get;set;} 
		public String activity {get;set;} 
		public Boolean stempty {get;set;} 
		public String actfor {get;set;} 
		public String geo_site {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String country {get;set;} 
		public String country_code {get;set;} 

		public Latest(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'actual_time') {
							actual_time = parser.getText();
						} else if (text == 'activity') {
							activity = parser.getText();
						} else if (text == 'stempty') {
							stempty = parser.getBooleanValue();
						} else if (text == 'actfor') {
							actfor = parser.getText();
						} else if (text == 'geo_site') {
							geo_site = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'country_code') {
							country_code = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Latest consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSON2Apex_ContainerTrackingExtention parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSON2Apex_ContainerTrackingExtention(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
  

    private static List<Locations> arrayOfLocations(System.JSONParser p) {
        List<Locations> res = new List<Locations>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Locations(p));
        }
        return res;
    }

    private static List<Events> arrayOfEvents(System.JSONParser p) {
        List<Events> res = new List<Events>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Events(p));
        }
        return res;
    }

    private static List<Containers> arrayOfContainers(System.JSONParser p) {
        List<Containers> res = new List<Containers>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Containers(p));
        }
        return res;
    }
}